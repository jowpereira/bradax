"""
Script de execu√ß√£o do Bradax Broker
Carrega configura√ß√µes do .env e inicia o servidor
"""
import os
import sys
from pathlib import Path
from dotenv import load_dotenv
import uvicorn

# Adicionar src ao path
src_path = Path(__file__).parent / "src"
sys.path.insert(0, str(src_path))

def main():
    """Fun√ß√£o principal"""
    # Carregar vari√°veis de ambiente
    env_file = Path(__file__).parent / ".env"
    load_dotenv(dotenv_path=env_file)
    
    print("üöÄ Iniciando Bradax Broker...")
    print(f"üìÅ Diret√≥rio de trabalho: {Path.cwd()}")
    print(f"üîë JWT_SECRET definido: {'***' if os.getenv('JWT_SECRET') else 'N√ÉO'}")
    print(f"ü§ñ OpenAI configurado: {'‚úÖ' if os.getenv('OPENAI_API_KEY', '').startswith('sk-') else '‚ùå'}")
    
    # Importar e iniciar aplica√ß√£o
    try:
        from broker.main import app
        
        # Configura√ß√£o do servidor
        config = {
            "app": app,
            "host": "0.0.0.0",
            "port": 8000,
            "reload": False,  # Desabilitado para evitar conflitos em produ√ß√£o
            "log_level": "info"
        }
        
        print(f"üåê Iniciando servidor em http://{config['host']}:{config['port']}")
        uvicorn.run(**config)
        
    except ImportError as e:
        print(f"‚ùå Erro ao importar aplica√ß√£o: {e}")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå Erro ao iniciar servidor: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
