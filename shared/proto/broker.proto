syntax = "proto3";

package bradax.v1;

// Serviço principal do Broker
service BrokerService {
  // Autenticação e autorização
  rpc Authenticate(AuthRequest) returns (AuthResponse);
  rpc RefreshToken(RefreshRequest) returns (AuthResponse);
  rpc ValidateToken(ValidateRequest) returns (ValidateResponse);
  
  // Operações com LLMs
  rpc InvokeLLM(LLMRequest) returns (LLMResponse);
  rpc StreamLLM(LLMRequest) returns (stream LLMStreamResponse);
  
  // Operações com Vector DB
  rpc QueryVector(VectorQueryRequest) returns (VectorQueryResponse);
  rpc UpsertVector(VectorUpsertRequest) returns (VectorUpsertResponse);
  
  // Gerenciamento de grafos
  rpc DeployGraph(GraphDeployRequest) returns (GraphDeployResponse);
  rpc ExecuteGraph(GraphExecuteRequest) returns (GraphExecuteResponse);
  
  // Métricas e observabilidade
  rpc GetMetrics(MetricsRequest) returns (MetricsResponse);
  rpc HealthCheck(HealthRequest) returns (HealthResponse);
}

// Mensagens de Autenticação
message AuthRequest {
  string project_id = 1;
  string api_key = 2;
  repeated string scopes = 3;
}

message AuthResponse {
  string access_token = 1;
  string refresh_token = 2;
  int64 expires_in = 3;
  string token_type = 4;
}

message RefreshRequest {
  string refresh_token = 1;
}

message ValidateRequest {
  string access_token = 1;
}

message ValidateResponse {
  bool valid = 1;
  string project_id = 2;
  repeated string scopes = 3;
  int64 expires_at = 4;
}

// Mensagens de LLM
message LLMRequest {
  string model = 1;
  repeated Message messages = 2;
  LLMParameters parameters = 3;
  map<string, string> metadata = 4;
}

message Message {
  string role = 1;  // system, user, assistant
  string content = 2;
  map<string, string> metadata = 3;
}

message LLMParameters {
  optional float temperature = 1;
  optional int32 max_tokens = 2;
  optional float top_p = 3;
  optional int32 top_k = 4;
  repeated string stop_sequences = 5;
  optional bool stream = 6;
}

message LLMResponse {
  string content = 1;
  string model = 2;
  Usage usage = 3;
  map<string, string> metadata = 4;
}

message LLMStreamResponse {
  string delta = 1;
  bool finished = 2;
  optional Usage usage = 3;
}

message Usage {
  int32 prompt_tokens = 1;
  int32 completion_tokens = 2;
  int32 total_tokens = 3;
  optional float cost_usd = 4;
}

// Mensagens de Vector DB
message VectorQueryRequest {
  string collection = 1;
  repeated float query_vector = 2;
  optional string query_text = 3;
  int32 top_k = 4;
  optional float threshold = 5;
  map<string, string> filters = 6;
}

message VectorQueryResponse {
  repeated VectorResult results = 1;
}

message VectorResult {
  string id = 1;
  float score = 2;
  map<string, string> metadata = 3;
  optional string text = 4;
}

message VectorUpsertRequest {
  string collection = 1;
  repeated VectorDocument documents = 2;
}

message VectorDocument {
  string id = 1;
  repeated float vector = 2;
  map<string, string> metadata = 3;
  optional string text = 4;
}

message VectorUpsertResponse {
  int32 upserted_count = 1;
  repeated string ids = 2;
}

// Mensagens de Graph
message GraphDeployRequest {
  string name = 1;
  string definition = 2;  // YAML ou JSON
  string format = 3;      // "yaml" ou "json"
  map<string, string> metadata = 4;
}

message GraphDeployResponse {
  string graph_id = 1;
  string version = 2;
  bool success = 3;
  optional string error = 4;
}

message GraphExecuteRequest {
  string graph_id = 1;
  map<string, string> inputs = 2;
  optional bool stream = 3;
}

message GraphExecuteResponse {
  map<string, string> outputs = 1;
  repeated GraphStep steps = 2;
  map<string, string> metadata = 3;
}

message GraphStep {
  string node_id = 1;
  string status = 2;  // pending, running, completed, failed
  map<string, string> inputs = 3;
  map<string, string> outputs = 4;
  optional string error = 5;
  int64 started_at = 6;
  optional int64 completed_at = 7;
}

// Mensagens de Métricas
message MetricsRequest {
  optional string project_id = 1;
  optional int64 start_time = 2;
  optional int64 end_time = 3;
  repeated string metric_types = 4;
}

message MetricsResponse {
  repeated Metric metrics = 1;
}

message Metric {
  string name = 1;
  string type = 2;
  double value = 3;
  map<string, string> labels = 4;
  int64 timestamp = 5;
}

// Mensagens de Health Check
message HealthRequest {}

message HealthResponse {
  string status = 1;  // healthy, degraded, unhealthy
  map<string, string> checks = 2;
  int64 timestamp = 3;
}
